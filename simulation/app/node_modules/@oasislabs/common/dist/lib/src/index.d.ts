export { default as cbor } from './cbor';
import * as bytes from './bytes';
export { Db, LocalStorage, DummyStorage } from './db';
export { sleep } from './utils';
/**
 * Lighteweight wrapper for bytes with an easy hex conversion.
 */
export declare abstract class Bytes {
    private _bytes;
    private _hex;
    constructor(expectedLength: number, repr: string | Uint8Array);
    get bytes(): Uint8Array;
    get hex(): string;
}
/**
 * A 20-byte Oasis account address. May be hex-encoded.
 */
export declare class Address extends Bytes {
    constructor(repr: string | Uint8Array);
}
/**
 * A 16-byte Oasis account balance.
 * JS `Number`s do not have enough precision to hold a 128-bit integer
 * so you should prefer to encode as hex or pass a Uint8Array directly.
 */
export declare class Balance extends Bytes {
    constructor(repr: string | Uint8Array | bigint | number);
}
export { bytes };
